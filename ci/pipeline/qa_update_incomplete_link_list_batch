import java.net.URI

pipeline {
    agent any

    options {
        buildDiscarder(logRotator(numToKeepStr: "25"))
        disableConcurrentBuilds()
    }

    stages {
        stage("Setup") {
            steps {
                    script {
                        STAGE_RUN_TASK = [
                            "ssh web@testing1 \'cd /home/web/digiroad2/current && echo YES |",
                             "/home/web/digiroad2/current/./sbt",
                             "-Ddigiroad2.env=testing",
                             "\"project digiroad2\"",
                             "\"runMain fi.liikennevirasto.digiroad2.util.UpdateIncompleteLinkList\"\'"
                        ].join(" ")
                         STAGE_RUN_TASK2 = [
                            "ssh web@testing2 \'cd /home/web/digiroad2/current && echo YES |",
                             "/home/web/digiroad2/current/./sbt",
                             "-Ddigiroad2.env=testing",
                             "\"project digiroad2\"",
                             "\"runMain fi.liikennevirasto.digiroad2.util.UpdateIncompleteLinkList\"\'"
                         ].join(" ")
                    }
            }
        }

        stage("Prepare") {
            steps {
                script {

                    def jenkins_uid = sh(returnStdout: true, script: "id -u").trim()

                    def build_args = [
                        "--build-arg http_proxy=${http_proxy}",
                        "--build-arg https_proxy=${http_proxy}",
                        "--build-arg no_proxy=${no_proxy}",
                        "--build-arg JENKINS_UID=${jenkins_uid}"
                    ].join(" ")

                    docker.build(
                         "digiroad2-cap",
                         "${build_args} -f ci/docker/Dockerfile.ruby ci"
                    )
                }
            }
        }

        stage("Run Task") {
                    stage("Server 2") {
                             agent {
                                        docker {
                                            image "digiroad2-cap"
                                        }
                                    }
                            steps {

                                withCredentials([file(credentialsId: 'ssh_config', variable: 'SSH_CONFIG'),
                                                 file(credentialsId: 'SSH_KNOWN_HOSTS', variable: 'KNOWN_HOSTS'),
                                                 file(credentialsId: 'ID_RSA', variable: 'ID_RSA')]) {
                                    sh "mkdir ~/.ssh/ && cp ${SSH_CONFIG} ~/.ssh/ && cp ${KNOWN_HOSTS} ~/.ssh/"
                                    sh "cp ${ID_RSA} ~/.ssh/"
                                }
                                sh STAGE_RUN_TASK2
                            }
                          }
                  stage("Server 1") {
                    agent {
                              docker {
                                  image "digiroad2-cap"
                              }
                          }
                      steps {
                          withCredentials([file(credentialsId: 'ssh_config', variable: 'SSH_CONFIG'),
                                           file(credentialsId: 'SSH_KNOWN_HOSTS', variable: 'KNOWN_HOSTS'),
                                           file(credentialsId: 'ID_RSA', variable: 'ID_RSA')]) {
                              sh "mkdir ~/.ssh/ && cp ${SSH_CONFIG} ~/.ssh/ && cp ${KNOWN_HOSTS} ~/.ssh/"
                              sh "cp ${ID_RSA} ~/.ssh/"
                          }
                          sh STAGE_RUN_TASK
                      }
                  }
        }
    }

    post {
        always {
            deleteDir()
        }
    }
}