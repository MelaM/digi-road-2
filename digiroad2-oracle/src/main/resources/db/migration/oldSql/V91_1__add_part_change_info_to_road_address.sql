ALTER TABLE ROAD_ADDRESS
ADD (CALIBRATION_POINTS NUMBER DEFAULT 0 NOT NULL);

UPDATE ROAD_ADDRESS
  SET CALIBRATION_POINTS = 1
  WHERE NOT EXISTS(SELECT 1 FROM ROAD_ADDRESS RA2 WHERE RA2.ID != ROAD_ADDRESS.ID AND
    RA2.ROAD_NUMBER = ROAD_ADDRESS.ROAD_NUMBER AND
    RA2.ROAD_PART_NUMBER = ROAD_ADDRESS.ROAD_PART_NUMBER AND
    RA2.START_ADDR_M = ROAD_ADDRESS.END_ADDR_M AND
    RA2.TRACK_CODE = ROAD_ADDRESS.TRACK_CODE AND
    (
-- both are open-ended
      ROAD_ADDRESS.END_DATE IS NULL AND RA2.END_DATE IS NULL OR
-- either is closed -> must overlap, using reverse logic here with NOT
      NOT (RA2.END_DATE < ROAD_ADDRESS.START_DATE OR RA2.START_DATE > ROAD_ADDRESS.END_DATE)
    )
    );

UPDATE ROAD_ADDRESS
  SET CALIBRATION_POINTS = CALIBRATION_POINTS + 2
  WHERE
    START_ADDR_M = 0 OR
    NOT EXISTS(SELECT 1 FROM ROAD_ADDRESS RA2 WHERE RA2.ID != ROAD_ADDRESS.ID AND
    RA2.ROAD_NUMBER = ROAD_ADDRESS.ROAD_NUMBER AND
    RA2.ROAD_PART_NUMBER = ROAD_ADDRESS.ROAD_PART_NUMBER AND
    RA2.END_ADDR_M = ROAD_ADDRESS.START_ADDR_M AND
    RA2.TRACK_CODE = ROAD_ADDRESS.TRACK_CODE AND
    (
-- both are open-ended
      ROAD_ADDRESS.END_DATE IS NULL AND RA2.END_DATE IS NULL OR
-- either is closed -> must overlap, using reverse logic here with NOT
      NOT (RA2.END_DATE < ROAD_ADDRESS.START_DATE OR RA2.START_DATE > ROAD_ADDRESS.END_DATE)
    )
    );