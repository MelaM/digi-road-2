version: 0.2

phases:
  install:
    runtime-versions:
      java: corretto8
    commands:
      - echo "deb https://repo.scala-sbt.org/scalasbt/debian /" | tee -a  /etc/apt/sources.list.d/sbt.list
      - apt-get update
      - apt-get install sbt
      - npm install -g yarn
      - npm install && yarn install --ignore-engines
      - npm install -g grunt-cli
  pre_build:
    commands:
      - pip install --upgrade awscli
      - $(aws ecr get-login --no-include-email --region eu-west-1  | docker login --username AWS --password-stdin 475079312496.dkr.ecr.eu-west-1.amazonaws.com)
      - mkdir digiroad2-geo/lib
      - aws s3 cp "s3://geotools-repo/gt-graph-19.0.jar" ./digiroad2-geo/lib
      - aws s3 cp "s3://geotools-repoL/gt-main-19.0.jar" ./digiroad2-geo/lib
      - aws s3 cp "s3://geotools-repo/gt-api-19.0.jar" ./digiroad2-geo/lib
      - aws s3 cp "s3://geotools-repo/gt-referencing-19.0.jar" ./digiroad2-geo/lib
      - aws s3 cp "s3://geotools-repo/gt-metadata-19.0.jar" ./digiroad2-geo/lib
      - aws s3 cp "s3://geotools-repo/gt-opengis-19.0.jar" ./digiroad2-geo/lib
      - aws s3 cp "s3://geotools-repo/jts-core-1.14.0.jar" ./digiroad2-geo/lib
  build:
    commands:
      # - grunt test
      # - sbt test
      - grunt deploy
      - sbt clean
      - sbt assembly
      - docker build -f aws/fargate/Dockerfile --build-arg image=475079312496.dkr.ecr.eu-west-1.amazonaws.com/openjdk_8u191-jre-alpine:latest  -t $ECR_REPOSITORY_NAME:latest .
      - echo Post-build started on `date`
      - docker tag $ECR_REPOSITORY_NAME:latest $ECR_REPOSITORY_URI:latest
      - docker tag $ECR_REPOSITORY_NAME:latest $ECR_REPOSITORY_URI:$CODEBUILD_BUILD_NUMBER
      - docker push $ECR_REPOSITORY_URI:latest
      - docker push $ECR_REPOSITORY_URI:$CODEBUILD_BUILD_NUMBER
  post_build:
    commands:
      - printf '[{"name":"%s","imageUri":"%s"}]' $ECS_SERVICE_NAME $REPOSITORY:latest > imagedefinitions.json
artiacts:
  files: imagedefinitions.json