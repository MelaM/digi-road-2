AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Based on vaylas cicd-github.yaml template
Parameters:
  PipelineName:
    Description: Pipeline name, no capital letter
    Type: String
  ApplicationName:
    Description: Application name
    Type: String
  EcsClusterName:
    Description: ECS cluster name
    Type: String
  EcsServiceName:
    Description: ECS service name
    Type: String
  EcrRepositoryName:
    Description: ECR image name
    Type: String
    AllowedPattern: "^[a-z0-9]+$"
  TestDatabaseString:
    Description: Database for running test
    Type: String
  TestDatabaseUser:
    Description: username
    Type: String
  GitBranchName:
    Description: GitHub branch name
    Type: String
    Default: master
  GitRepositoryName:
    Description: GitHub repository name
    Type: String
  GitHubOwner:
    Type: String
  GitHubWebhookSecret:
    Description: Personal access token that is needed to access the webhook of Codepipeline to invoke the pipeline
    Type: String
    NoEcho: true
    MinLength: 20

Resources:

  CodePipelineArtifactStoreBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Sub "${PipelineName}-artifact-store-bucket"

  CodePipelineArtifactStoreBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref CodePipelineArtifactStoreBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: DenyUnEncryptedObjectUploads
            Effect: Deny
            Principal: '*'
            Action: 's3:PutObject'
            Resource: !Sub "${CodePipelineArtifactStoreBucket.Arn}/*"
            Condition:
              StringNotEquals:
                's3:x-amz-server-side-encryption': 'aws:kms'
          - Sid: DenyInsecureConnections
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource: !Sub "${CodePipelineArtifactStoreBucket.Arn}/*"
            Condition:
              Bool:
                'aws:SecureTransport': false

  AppPipelineWebhook:
    Type: 'AWS::CodePipeline::Webhook'
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: !Ref GitHubWebhookSecret
      Filters:
        - JsonPath: $.ref
          MatchEquals: 'refs/heads/{Branch}'
      TargetPipeline: !Ref AppPipeline
      TargetAction: SourceAction
      Name: AppPipelineWebhook
      TargetPipelineVersion: !GetAtt AppPipeline.Version
      RegisterWithThirdParty: true

  AppPipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      Name: !Ref PipelineName
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactStoreBucket
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitRepositoryName
                Branch: !Ref GitBranchName
                OAuthToken: !Ref GitHubWebhookSecret
                PollForSourceChanges: false
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: BuildAction
              InputArtifacts:
                - Name: SourceOutput
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              OutputArtifacts:
                - Name: Built
              Configuration:
                ProjectName: !Ref CodeBuild
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: ECS
              Configuration:
                ClusterName: !Ref EcsClusterName
                ServiceName: !Ref EcsServiceName
                FileName: !Sub "imagedefinitions.json"
              InputArtifacts:
                - Name: Built
              RunOrder: 1

  CodePipelineServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub "${PipelineName}-codepipeline-role"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Sub "${PipelineName}-codepipeline-policy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:StartBuild'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                  - 'lambda:ListFunctions'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'cloudwatch:*'
                  - 's3:*'
                  - 'cloudformation:*'
                  - 'ecs:*'
                Resource: '*'

  CodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Ref ApplicationName
      Description: "Build project for the application"
      ServiceRole: !Ref CodeBuildRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: "aws/buildspec.yaml"
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0 # https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-available.html
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: ECR_REPOSITORY_NAME
            Value: !Ref EcrRepositoryName
          - Name: ECR_REPOSITORY_URI
            Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrRepositoryName}"
          - Name: ECS_SERVICE_NAME
            Value: !Ref ApplicationName
          - Name: bonecp_jdbcurl
            Value: !Ref TestDatabaseString
          - Name: bonecp_username
            Value: !Ref TestDatabaseUser
          - Name: featureProvider
            Value: fi.liikennevirasto.digiroad2.service.AssetPropertyService
          - Name: speedLimitProvider
            Value: fi.liikennevirasto.digiroad2.service.linearasset.SpeedLimitService
          - Name: userProvider
            Value: fi.liikennevirasto.digiroad2.dao.PostGISUserProvider
          - Name: municipalityProvider
            Value: fi.liikennevirasto.digiroad2.dao.PostGISMunicipalityProvider
          - Name: eventBus
            Value: fi.liikennevirasto.digiroad2.DigiroadEventBus
          - Name: useVVHGeometry
            Value: true
          - Name: VVHServiceHost
            Value: localhost:6080
          - Name: VVHRestApiEndPoint
            Value: http://localhost:6080/arcgis/rest/services/VVH_OTH_DEV/
          - Name: VVHRoadlink.frozen
            Value: false
          - Name: viiteRestApiEndPoint
            Value: http://localhost:9080/api/viite/
          - Name: authenticationTestMode
            Value: true
          - Name: tierekisteriViiteRestApiEndPoint
            Value: http://localhost:8080/api/tierekisteri/
          - Name: tierekisteriRestApiEndPoint
            Value: http://localhost:8080/api/tierekisteri/
          - Name: tierekisteri.enabled
            Value: false
          - Name: vallu.server.sending_enabled
            Value: false
          - Name: http.proxySet
            Value: false
          - Name: authentication.basic.username
            Value: kalpa
          - Name: authentication.basic.password
            Value: kalpa
          - Name: authentication.serviceRoad.basic.username
            Value: kalpa
          - Name: authentication.serviceRoad.basic.password
            Value: kalpa
          - Name: authentication.municipality.basic.username
            Value: kalpa
          - Name: authentication.municipality.basic.password
            Value: kalpa
          - Name: bonecp.password
            Value: "/test/bonecp.password"
            Type: PARAMETER_STORE

      Artifacts:
        Name: !Ref ApplicationName
        Type: CODEPIPELINE

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub "${PipelineName}-codebuild-role"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: !Sub "${PipelineName}-codebuild-policy"
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Resource: "*"
                Action:
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:GetRepositoryPolicy"
                  - "ecr:DescribeRepositories"
                  - "ecr:ListImages"
                  - "ecr:DescribeImages"
                  - "ecr:BatchGetImage"
                  - "ecr:GetLifecyclePolicy"
                  - "ecr:GetLifecyclePolicyPreview"
                  - "ecr:ListTagsForResource"
                  - "ecr:DescribeImageScanFindings"
                  - "ecr:InitiateLayerUpload"
                  - "ecr:UploadLayerPart"
                  - "ecr:CompleteLayerUpload"
                  - "ecr:PutImage"
                  - "ssm:GetParameters"
              - Effect: "Allow"
                Resource: "*"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
              - Effect: "Allow"
                Resource:
                  - !Sub "arn:aws:s3:::${CodePipelineArtifactStoreBucket}/*"
                Action:
                  - "s3:GetObject"
                  - "s3:GetObjectVersion"
                  - "s3:PutObject"
              - Effect: "Allow"
                Resource:
                  - arn:aws:s3:::geotools-repo/*
                Action:
                  - "s3:GetObject"
  ECRRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref EcrRepositoryName
      ImageScanningConfiguration:
        ScanOnPush: "true"